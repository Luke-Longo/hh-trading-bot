/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Structs {
  export type InfoStruct = {
    owner: PromiseOrValue<string>;
    number: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export interface ArbitrageInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "callFunction(address,(address,uint256),bytes)": FunctionFragment;
    "currencies(address)": FunctionFragment;
    "executeTrade(bool,address,address,uint256)": FunctionFragment;
    "i_sRouter()": FunctionFragment;
    "i_uRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "tokenToMarketId(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "callFunction"
      | "currencies"
      | "executeTrade"
      | "i_sRouter"
      | "i_uRouter"
      | "owner"
      | "tokenToMarketId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callFunction",
    values: [
      PromiseOrValue<string>,
      Structs.InfoStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "i_sRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "i_uRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenToMarketId",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currencies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "i_sRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "i_uRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToMarketId",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Arbitrage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbitrageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    callFunction(
      arg0: PromiseOrValue<string>,
      arg1: Structs.InfoStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeTrade(
      _startOnUniswap: PromiseOrValue<boolean>,
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    i_sRouter(overrides?: CallOverrides): Promise<[string]>;

    i_uRouter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    tokenToMarketId(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  callFunction(
    arg0: PromiseOrValue<string>,
    arg1: Structs.InfoStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeTrade(
    _startOnUniswap: PromiseOrValue<boolean>,
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    _flashAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  i_sRouter(overrides?: CallOverrides): Promise<string>;

  i_uRouter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  tokenToMarketId(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    callFunction(
      arg0: PromiseOrValue<string>,
      arg1: Structs.InfoStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    currencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTrade(
      _startOnUniswap: PromiseOrValue<boolean>,
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    i_sRouter(overrides?: CallOverrides): Promise<string>;

    i_uRouter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    tokenToMarketId(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    callFunction(
      arg0: PromiseOrValue<string>,
      arg1: Structs.InfoStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTrade(
      _startOnUniswap: PromiseOrValue<boolean>,
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    i_sRouter(overrides?: CallOverrides): Promise<BigNumber>;

    i_uRouter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToMarketId(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callFunction(
      arg0: PromiseOrValue<string>,
      arg1: Structs.InfoStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeTrade(
      _startOnUniswap: PromiseOrValue<boolean>,
      _token0: PromiseOrValue<string>,
      _token1: PromiseOrValue<string>,
      _flashAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    i_sRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    i_uRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToMarketId(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
