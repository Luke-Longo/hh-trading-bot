/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Structs {
  export type InfoStruct = {
    owner: PromiseOrValue<string>;
    number: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };

  export type WeiStruct = {
    sign: PromiseOrValue<boolean>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type WeiStructOutput = [boolean, BigNumber] & {
    sign: boolean;
    value: BigNumber;
  };

  export type AssetAmountStruct = {
    sign: PromiseOrValue<boolean>;
    denomination: PromiseOrValue<BigNumberish>;
    ref: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type AssetAmountStructOutput = [boolean, number, number, BigNumber] & {
    sign: boolean;
    denomination: number;
    ref: number;
    value: BigNumber;
  };

  export type ActionArgsStruct = {
    actionType: PromiseOrValue<BigNumberish>;
    accountId: PromiseOrValue<BigNumberish>;
    amount: Structs.AssetAmountStruct;
    primaryMarketId: PromiseOrValue<BigNumberish>;
    secondaryMarketId: PromiseOrValue<BigNumberish>;
    otherAddress: PromiseOrValue<string>;
    otherAccountId: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionArgsStructOutput = [
    number,
    BigNumber,
    Structs.AssetAmountStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    actionType: number;
    accountId: BigNumber;
    amount: Structs.AssetAmountStructOutput;
    primaryMarketId: BigNumber;
    secondaryMarketId: BigNumber;
    otherAddress: string;
    otherAccountId: BigNumber;
    data: string;
  };
}

export interface DyDxPoolInterface extends utils.Interface {
  functions: {
    "getAccountWei((address,uint256),uint256)": FunctionFragment;
    "operate((address,uint256)[],(uint8,uint256,(bool,uint8,uint8,uint256),uint256,uint256,address,uint256,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getAccountWei" | "operate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountWei",
    values: [Structs.InfoStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [Structs.InfoStruct[], Structs.ActionArgsStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;

  events: {};
}

export interface DyDxPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DyDxPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountWei(
      account: Structs.InfoStruct,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Structs.WeiStructOutput]>;

    operate(
      arg0: Structs.InfoStruct[],
      arg1: Structs.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountWei(
    account: Structs.InfoStruct,
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Structs.WeiStructOutput>;

  operate(
    arg0: Structs.InfoStruct[],
    arg1: Structs.ActionArgsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountWei(
      account: Structs.InfoStruct,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Structs.WeiStructOutput>;

    operate(
      arg0: Structs.InfoStruct[],
      arg1: Structs.ActionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAccountWei(
      account: Structs.InfoStruct,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      arg0: Structs.InfoStruct[],
      arg1: Structs.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountWei(
      account: Structs.InfoStruct,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      arg0: Structs.InfoStruct[],
      arg1: Structs.ActionArgsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
