/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Encoding,
  EncodingInterface,
} from "../../../contracts/sublesson/Encoding";

const _abi = [
  {
    inputs: [],
    name: "combineStrings",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decodeString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "encodeNumber",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "encodeString",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "encodeStringBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "encodeStringPacked",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "multiDecode",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "multiDecodePacked",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "multiEncode",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "multiEncodePacked",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "multiStringCastPacked",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recentWinner",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bf1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063929b807e11610071578063929b807e1461016b578063a6dc49b814610189578063a77b0360146101a7578063b4748718146101c5578063c452d79b146101e3578063ed5df36514610202576100b4565b8063114a7610146100b957806315889d1a146100d75780632085f4b9146100f5578063406ec9f21461011357806351cff8d91461013157806360ee46c31461014d575b600080fd5b6100c1610220565b6040516100ce919061085b565b60405180910390f35b6100df610245565b6040516100ec919061081e565b60405180910390f35b6100fd610273565b60405161010a919061081e565b60405180910390f35b61011b61029e565b604051610128919061081e565b60405180910390f35b61014b6004803603810190610146919061052d565b6102e1565b005b610155610391565b604051610162919061085b565b60405180910390f35b6101736103a6565b604051610180919061085b565b60405180910390f35b6101916103ce565b60405161019e919061081e565b60405180910390f35b6101af6103f9565b6040516101bc919061085b565b60405180910390f35b6101cd610421565b6040516101da919061081e565b60405180910390f35b6101eb61044c565b6040516101f992919061087d565b60405180910390f35b61020a61047d565b604051610217919061081e565b60405180910390f35b6060604051602001610231906107b4565b604051602081830303815290604052905090565b60606000600160405160200161025b9190610840565b60405160208183030381529060405290508091505090565b60606000604051602001610286906107d4565b60405160208183030381529060405290508091505090565b606060006040518060400160405280600b81526020017f736f6d6520737472696e6700000000000000000000000000000000000000000081525090508091505090565b60008173ffffffffffffffffffffffffffffffffffffffff164760405161030790610809565b60006040518083038185875af1925050503d8060008114610344576040519150601f19603f3d011682016040523d82523d6000602084013e610349565b606091505b505090508061038d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038490610907565b60405180910390fd5b5050565b6060600061039d610421565b90508091505090565b606060006103b2610421565b8060200190518101906103c5919061055a565b90508091505090565b606060006040516020016103e1906108d4565b60405160208183030381529060405290508091505090565b6060600061040561047d565b806020019051810190610418919061055a565b90508091505090565b60606000604051602001610434906107e9565b60405160208183030381529060405290508091505090565b60608060008061045a6103ce565b80602001905181019061046d91906105a3565b9150915081819350935050509091565b60606000604051602001610490906108b4565b60405160208183030381529060405290508091505090565b60006104bb6104b68461094c565b610927565b9050828152602081018484840111156104d7576104d6610ab4565b5b6104e2848285610a1c565b509392505050565b6000813590506104f981610ba4565b92915050565b600082601f83011261051457610513610aaf565b5b81516105248482602086016104a8565b91505092915050565b60006020828403121561054357610542610abe565b5b6000610551848285016104ea565b91505092915050565b6000602082840312156105705761056f610abe565b5b600082015167ffffffffffffffff81111561058e5761058d610ab9565b5b61059a848285016104ff565b91505092915050565b600080604083850312156105ba576105b9610abe565b5b600083015167ffffffffffffffff8111156105d8576105d7610ab9565b5b6105e4858286016104ff565b925050602083015167ffffffffffffffff81111561060557610604610ab9565b5b610611858286016104ff565b9150509250929050565b60006106268261097d565b6106308185610993565b9350610640818560208601610a1c565b61064981610ac3565b840191505092915050565b61065d81610a0a565b82525050565b600061066e82610988565b61067881856109af565b9350610688818560208601610a1c565b61069181610ac3565b840191505092915050565b60006106a96008836109c0565b91506106b482610ad4565b600882019050919050565b60006106cc6009836109c0565b91506106d782610afd565b600982019050919050565b60006106ef600c836109af565b91506106fa82610b26565b602082019050919050565b6000610712600c836109c0565b915061071d82610b26565b600c82019050919050565b6000610735600b836109af565b915061074082610b4f565b602082019050919050565b6000610758600b836109c0565b915061076382610b4f565b600b82019050919050565b600061077b600f836109af565b915061078682610b78565b602082019050919050565b600061079e6000836109a4565b91506107a982610ba1565b600082019050919050565b60006107bf8261069c565b91506107ca826106bf565b9150819050919050565b60006107df8261074b565b9150819050919050565b60006107f48261074b565b91506107ff82610705565b9150819050919050565b600061081482610791565b9150819050919050565b60006020820190508181036000830152610838818461061b565b905092915050565b60006020820190506108556000830184610654565b92915050565b600060208201905081810360008301526108758184610663565b905092915050565b600060408201905081810360008301526108978185610663565b905081810360208301526108ab8184610663565b90509392505050565b600060208201905081810360008301526108cd81610728565b9050919050565b600060408201905081810360008301526108ed81610728565b90508181036020830152610900816106e2565b9050919050565b600060208201905081810360008301526109208161076e565b9050919050565b6000610931610942565b905061093d8282610a4f565b919050565b6000604051905090565b600067ffffffffffffffff82111561096757610966610a80565b5b61097082610ac3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006109d6826109dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b6000610a15826109fd565b9050919050565b60005b83811015610a3a578082015181840152602081019050610a1f565b83811115610a49576000848401525b50505050565b610a5882610ac3565b810181811067ffffffffffffffff82111715610a7757610a76610a80565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4869204d6f6d2120000000000000000000000000000000000000000000000000600082015250565b7f4d69737320796f752e0000000000000000000000000000000000000000000000600082015250565b7f6974277320626967676572210000000000000000000000000000000000000000600082015250565b7f736f6d6520737472696e67000000000000000000000000000000000000000000600082015250565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b50565b610bad816109cb565b8114610bb857600080fd5b5056fea26469706673582212202773c06fa0eefcba265ffc6ce10634f682152172919c7410ac83f63fbd7f019664736f6c63430008070033";

type EncodingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EncodingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Encoding__factory extends ContractFactory {
  constructor(...args: EncodingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Encoding> {
    return super.deploy(overrides || {}) as Promise<Encoding>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Encoding {
    return super.attach(address) as Encoding;
  }
  override connect(signer: Signer): Encoding__factory {
    return super.connect(signer) as Encoding__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EncodingInterface {
    return new utils.Interface(_abi) as EncodingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Encoding {
    return new Contract(address, _abi, signerOrProvider) as Encoding;
  }
}
